#!/usr/bin/env node


/**
 * Module dependencies.
 */

var app = require('../app');
var db = require('../DB');
var map = require('../map');
var debug = require('debug')('melaninaserver:server');
var http = require('http');
//var tty = require("tty");

/**
 * Get current version to compare in case necessary
 */
console.log("CurrentNodeVersion:", process.version);

/**
 * Get DB instance to have access
 */
app.set('DB', db);

/**
 * Get resource mapping ready to use
 */
map.setDB(db);
map.populate().then((res) => {
    app.set('MAP', map);
    console.log(map.preferencias);
    /*console.log(map.item.get("Melamina"));
    console.log(map.color.get("64b810acd8bfbca012887f5b"));
    console.log(map.item.list);
    map.item.add({_id:"64af3729d8464fce0b08d888",nombre:"pato",item:"colorado"});
    console.log(map.item.list);
    map.item.update("64af3729d8464fce0b08d888", {nombre:"chacho",item:"cachito"});
    console.log(map.item.list);
    map.item.delete("64af3729d8464fce0b08d888");
    console.log(map.item.list);*/
    console.log(map.control_producto.list);
    console.log(res ? "Resources loaded." : "Resources NOT loaded.");
});

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

server.on('close', function () {
  //handle your on exit code
  console.log("Exiting, have a nice day");
});

server.on('finish', function () {
  //handle your on exit code
  console.log("finish, have a nice day");
});

process.on('SIGTERM', () => {
  console.log('Signal received.');
});

process.on('exit', (code) => {
  if (code === 2) {
    log('Program exited manually.')
  } else if (code === 1) {
    log('Program crashed.')
  } else {
    log('Program exited.')
  }
  cleanup(browser) // I've tried putting it here too, but it still doesn't finish before the program ends
  process.exit(code)
})

process.openStdin().on("keypress", function(chunk, key) {
  if(key && key.name === "c" && key.ctrl) {
    console.log("bye bye");
    process.exit();
  }
});
